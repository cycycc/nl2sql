department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> How many heads of the departments are older than 56 ? <s> SELECT count(*) FROM head WHERE age  >  56 </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> List the name, born state and age of the heads of departments ordered by age. <s> SELECT name ,  born_state ,  age FROM head ORDER BY age </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> List the creation year, name and budget of each department. <s> SELECT creation ,  name ,  budget_in_billions FROM department </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> What are the maximum and minimum budget of the departments? <s> SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> What is the average number of employees of the departments whose rank is between 10 and 15? <s> SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15 </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> What are the names of the heads who are born outside the California state? <s> SELECT name FROM head WHERE born_state != 'California' </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'? <s> SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama' </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> What are the names of the states where at least 3 heads were born? <s> SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3 </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> In which year were most departments established? <s> SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'? <s> SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes' </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> How many acting statuses are there? <s> SELECT count(DISTINCT temporary_acting) FROM management </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> How many departments are led by heads who are not mentioned? <s> SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management); </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> What are the distinct ages of the heads who are acting? <s> SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes' </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born. <s> SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security' </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> Which department has more than 1 head at a time? List the id, name and the number of heads. <s> SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1 </s>
--SEPARATOR--
department <c> Department_ID <t> number <c> Name <t> text <c> Creation <t> text <c> Ranking <t> number <c> Budget_in_Billions <t> number <c> Num_Employees <t> number </t> head <c> head_ID <t> number <c> name <t> text <c> born_state <t> text <c> age <t> number </t> management <c> department_ID <t> number <c> head_ID <t> number <c> temporary_acting <t> text <i> Which head's name has the substring 'Ha'? List the id and name. <s> SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%' </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> How many farms are there? <s> SELECT count(*) FROM farm </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Count the number of farms. <s> SELECT count(*) FROM farm </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> List the total number of horses on farms in ascending order. <s> SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What is the total horses record for each farm, sorted ascending? <s> SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the hosts of competitions whose theme is not "Aliens"? <s> SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens' </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Return the hosts of competitions for which the theme is not Aliens? <s> SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens' </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the themes of farm competitions sorted by year in ascending order? <s> SELECT Theme FROM farm_competition ORDER BY YEAR ASC </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Return the themes of farm competitions, sorted by year ascending. <s> SELECT Theme FROM farm_competition ORDER BY YEAR ASC </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What is the average number of working horses of farms with more than 5000 total number of horses? <s> SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Give the average number of working horses on farms with more than 5000 total horses. <s> SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the maximum and minimum number of cows across all farms. <s> SELECT max(Cows) ,  min(Cows) FROM farm </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Return the maximum and minimum number of cows across all farms. <s> SELECT max(Cows) ,  min(Cows) FROM farm </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> How many different statuses do cities have? <s> SELECT count(DISTINCT Status) FROM city </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Count the number of different statuses. <s> SELECT count(DISTINCT Status) FROM city </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> List official names of cities in descending order of population. <s> SELECT Official_Name FROM city ORDER BY Population DESC </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the official names of cities, ordered descending by population? <s> SELECT Official_Name FROM city ORDER BY Population DESC </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> List the official name and status of the city with the largest population. <s> SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What is the official name and status of the city with the most residents? <s> SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Show the years and the official names of the host cities of competitions. <s> SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Give the years and official names of the cities of each competition. <s> SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Show the official names of the cities that have hosted more than one competition. <s> SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the official names of cities that have hosted more than one competition? <s> SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Show the status of the city that has hosted the greatest number of competitions. <s> SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What is the status of the city that has hosted the most competitions? <s> SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Please show the themes of competitions with host cities having populations larger than 1000. <s> SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the themes of competitions that have corresponding host cities with more than 1000 residents? <s> SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Please show the different statuses of cities and the average population of cities with each status. <s> SELECT Status ,  avg(Population) FROM city GROUP BY Status </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the statuses and average populations of each city? <s> SELECT Status ,  avg(Population) FROM city GROUP BY Status </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Please show the different statuses, ordered by the number of cities that have each. <s> SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Return the different statuses of cities, ascending by frequency. <s> SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> List the most common type of Status across cities. <s> SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What is the most common status across all cities? <s> SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> List the official names of cities that have not held any competition. <s> SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition) </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the official names of cities that have not hosted a farm competition? <s> SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition) </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Show the status shared by cities with population bigger than 1500 and smaller than 500. <s> SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? <s> SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Find the official names of cities with population bigger than 1500 or smaller than 500. <s> SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the official names of cities that have population over 1500 or less than 500? <s> SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500 </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> Show the census ranking of cities whose status are not "Village". <s> SELECT Census_Ranking FROM city WHERE Status !=  "Village" </s>
--SEPARATOR--
city <c> City_ID <t> number <c> Official_Name <t> text <c> Status <t> text <c> Area_km_2 <t> number <c> Population <t> number <c> Census_Ranking <t> text </t> farm <c> Farm_ID <t> number <c> Year <t> number <c> Total_Horses <t> number <c> Working_Horses <t> number <c> Total_Cattle <t> number <c> Oxen <t> number <c> Bulls <t> number <c> Cows <t> number <c> Pigs <t> number <c> Sheep_and_Goats <t> number </t> farm_competition <c> Competition_ID <t> number <c> Year <t> number <c> Theme <t> text <c> Host_city_ID <t> number <c> Hosts <t> text </t> competition_record <c> Competition_ID <t> number <c> Farm_ID <t> number <c> Rank <t> number <i> What are the census rankings of cities that do not have the status "Village"? <s> SELECT Census_Ranking FROM city WHERE Status !=  "Village" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> which course has most number of registered students? <s> SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What is the name of the course with the most registered students? <s> SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> what is id of students who registered some courses but the least number of courses in these students? <s> SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of the students who registered for some courses but had the least number of courses for all students? <s> SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> what are the first name and last name of all candidates? <s> SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the first and last names of all the candidates? <s> SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> List the id of students who never attends courses? <s> SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance) </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the  ids of every student who has never attended a course? <s> SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance) </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> List the id of students who attended some courses? <s> SELECT student_id FROM student_course_attendance </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of all students who have attended at least one course? <s> SELECT student_id FROM student_course_attendance </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of all students for courses and what are the names of those courses? <s> SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What is detail of the student who most recently registered course? <s> SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What details do we have on the students who registered for courses most recently? <s> SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> How many students attend course English? <s> SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> How many students are attending English courses? <s> SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> How many courses do the student whose id is 171 attend? <s> SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> How many courses does the student with id 171 actually attend? <s> SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> Find id of the candidate whose email is stanley.monahan@example.org? <s> SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = "stanley.monahan@example.org" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What is the id of the candidate whose email is stanley.monahan@example.org? <s> SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = "stanley.monahan@example.org" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> Find id of the candidate who most recently accessed the course? <s> SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What is the id of the candidate who most recently accessed the course? <s> SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What is detail of the student who registered the most number of courses? <s> SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the details of the student who registered for the most number of courses? <s> SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> List the id of students who registered some courses and the number of their registered courses? <s> SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> For every student who is registered for some course, how many courses are they registered for? <s> SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> How many registed students do each course have? List course name and the number of their registered students? <s> SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> For each course id, how many students are registered and what are the course names? <s> SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> Find id of candidates whose assessment code is "Pass"? <s> SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = "Pass" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of the candidates that have an outcome code of Pass? <s> SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = "Pass" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> Find the cell mobile number of the candidates whose assessment code is "Fail"? <s> SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = "Fail" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the cell phone numbers of the candidates that received an assessment code of "Fail"? <s> SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = "Fail" </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the id of students who registered course 301? <s> SELECT student_id FROM student_course_attendance WHERE course_id  =  301 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of the students who registered for course 301? <s> SELECT student_id FROM student_course_attendance WHERE course_id  =  301 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What is the id of the student who most recently registered course 301? <s> SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of the students who registered for course 301 most recently? <s> SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> Find distinct cities of addresses of people? <s> SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the different cities where people live? <s> SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> Find distinct cities of address of students? <s> SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the different cities where students live? <s> SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> List the names of courses in alphabetical order? <s> SELECT course_name FROM courses ORDER BY course_name </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the names of the courses in alphabetical order? <s> SELECT course_name FROM courses ORDER BY course_name </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> List the first names of people in alphabetical order? <s> SELECT first_name FROM people ORDER BY first_name </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the first names of the people in alphabetical order? <s> SELECT first_name FROM people ORDER BY first_name </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the id of students who registered courses or attended courses? <s> SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of the students who either registered or attended a course? <s> SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> Find the id of courses which are registered or attended by student whose id is 121? <s> SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of the courses that are registered or attended by the student whose id is 121? <s> SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121 </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are all info of students who registered courses but not attended courses? <s> SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance) </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are all details of the students who registered but did not attend any course? <s> SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance) </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> List the id of students who registered course statistics in the order of registration date. <s> SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.registration_date </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of the students who registered course statistics by order of registration date? <s> SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.registration_date </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> List the id of students who attended  statistics courses in the order of attendance date. <s> SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.date_of_attendance </s>
--SEPARATOR--
Addresses <c> address_id <t> number <c> line_1 <t> text <c> line_2 <t> text <c> city <t> text <c> zip_postcode <t> text <c> state_province_county <t> text <c> country <t> text </t> People <c> person_id <t> number <c> first_name <t> text <c> middle_name <t> text <c> last_name <t> text <c> cell_mobile_number <t> text <c> email_address <t> text <c> login_name <t> text <c> password <t> text </t> Students <c> student_id <t> number <c> student_details <t> text </t> Courses <c> course_id <t> text <c> course_name <t> text <c> course_description <t> text <c> other_details <t> text </t> People_Addresses <c> person_address_id <t> number <c> person_id <t> number <c> address_id <t> number <c> date_from <t> time <c> date_to <t> time </t> Student_Course_Registrations <c> student_id <t> number <c> course_id <t> number <c> registration_date <t> time </t> Student_Course_Attendance <c> student_id <t> number <c> course_id <t> number <c> date_of_attendance <t> time </t> Candidates <c> candidate_id <t> number <c> candidate_details <t> text </t> Candidate_Assessments <c> candidate_id <t> number <c> qualification <t> text <c> assessment_date <t> time <c> asessment_outcome_code <t> text <i> What are the ids of the students who attended courses in the statistics department in order of attendance date. <s> SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.date_of_attendance </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Give me the dates when the max temperature was higher than 85. <s> SELECT date FROM weather WHERE max_temperature_f  >  85 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the dates with a maximum temperature higher than 85? <s> SELECT date FROM weather WHERE max_temperature_f  >  85 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the names of stations that have latitude lower than 37.5? <s> SELECT name FROM station WHERE lat  <  37.5 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the names of all stations with a latitude smaller than 37.5? <s> SELECT name FROM station WHERE lat  <  37.5 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each city, return the highest latitude among its stations. <s> SELECT city ,  max(lat) FROM station GROUP BY city </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each city, what is the highest latitude for its stations? <s> SELECT city ,  max(lat) FROM station GROUP BY city </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Give me the start station and end station for the trips with the three oldest id. <s> SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the station station and end station for the trips with the three smallest ids? <s> SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the average latitude and longitude of stations located in San Jose city? <s> SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  "San Jose" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the average latitude and longitude in San Jose? <s> SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  "San Jose" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the id of the trip that has the shortest duration? <s> SELECT id FROM trip ORDER BY duration LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the id of the shortest trip? <s> SELECT id FROM trip ORDER BY duration LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the total and maximum duration of trips with bike id 636? <s> SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the total and maximum duration for all trips with the bike id 636? <s> SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each zip code, return the average mean temperature of August there. <s> SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each zip code, what is the average mean temperature for all dates that start with '8'? <s> SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> From the trip record, find the number of unique bikes. <s> SELECT count(DISTINCT bike_id) FROM trip </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> How many different bike ids are there? <s> SELECT count(DISTINCT bike_id) FROM trip </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the number of distinct cities the stations are located at? <s> SELECT count(DISTINCT city) FROM station </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> How many different cities have these stations? <s> SELECT count(DISTINCT city) FROM station </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> How many stations does Mountain View city has? <s> SELECT COUNT(*) FROM station WHERE city  =  "Mountain View" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> How many stations are in Mountain View? <s> SELECT COUNT(*) FROM station WHERE city  =  "Mountain View" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Return the unique name for stations that have ever had 7 bikes available. <s> SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the different names for each station that has ever had 7 bikes available? <s> SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Which start station had the most trips starting from August? Give me the name and id of the station. <s> SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE "8/%" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the start station's name and id for the one that had the most start trips in August? <s> SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE "8/%" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Which bike traveled the most often in zip code 94002? <s> SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the id of the bike that traveled the most in 94002? <s> SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> How many days had both mean humidity above 50 and mean visibility above 8? <s> SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the number of days that had an average humity above 50 and an average visibility above 8? <s> SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the latitude, longitude, city of the station from which the shortest trip started? <s> SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the latitude, longitude, and city of the station from which the trip with smallest duration started? <s> SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the ids of stations that are located in San Francisco and have average bike availability above 10. <s> SELECT id FROM station WHERE city  =  "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the ids of the stations in San Francisco that normally have more than 10 bikes available? <s> SELECT id FROM station WHERE city  =  "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the names and ids of stations that had more than 14 bikes available on average or were installed in December? <s> SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE "12/%" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December? <s> SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE "12/%" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the 3 most common cloud cover rates in the region of zip code 94107? <s> SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the 3 most common cloud covers in the zip code of 94107? <s> SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the zip code in which the average mean sea level pressure is the lowest? <s> SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the zip code that has the lowest average mean sea level pressure? <s> SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the average bike availability in stations that are not located in Palo Alto? <s> SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  "Palo Alto") </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the average bike availablility for stations not in Palo Alto? <s> SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  "Palo Alto") </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the average longitude of stations that never had bike availability more than 10? <s> SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10) </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the mean longitude for all stations that have never had more than 10 bikes available? <s> SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10) </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> When and in what zip code did max temperature reach 80? <s> SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature? <s> SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Give me ids for all the trip that took place in a zip code area with average mean temperature above 60. <s> SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each zip code, find the ids of all trips that have a higher average mean temperature above 60? <s> SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each zip code, return how many times max wind speed reached 25? <s> SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each zip code, how many times has the maximum wind speed reached 25 mph? <s> SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> On which day and in which zip code was the min dew point lower than any day in zip code 94107? <s> SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107) </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken? <s> SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107) </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each trip, return its ending station's installation date. <s> SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the installation date for each ending station on all the trips? <s> SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Which trip started from the station with the largest dock count? Give me the trip id. <s> SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the id of the trip that started from the station with the highest dock count? <s> SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Count the number of trips that did not end in San Francisco city. <s> SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  "San Francisco" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> How many trips did not end in San Francisco? <s> SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != "San Francisco" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> In zip code 94107, on which day neither Fog nor Rain was not observed? <s> SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != "Fog" AND EVENTS != "Rain" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> On which day has it neither been foggy nor rained in the zip code of 94107? <s> SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != "Fog" AND EVENTS != "Rain" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the ids of stations that have latitude above 37.4 and never had bike availability below 7? <s> SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available? <s> SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are names of stations that have average bike availability above 10 and are not located in San Jose city? <s> SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  "San Jose" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the names of all stations that have more than 10 bikes available and are not located in San Jose? <s> SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  "San Jose" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the name, latitude, and city of the station with the lowest latitude? <s> SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the name, latitude, and city of the station that is located the furthest South? <s> SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds? <s> SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds? <s> SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> List the name and the number of stations for all the cities that have at least 15 stations. <s> SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the name of every city that has at least 15 stations and how many stations does it have? <s> SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Find the ids and names of stations from which at least 200 trips started. <s> SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the ids and names of all start stations that were the beginning of at least 200 trips? <s> SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Find the zip code in which the average mean visibility is lower than 10. <s> SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each zip code, select all those that have an average mean visiblity below 10. <s> SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> List all the cities in a decreasing order of each city's stations' highest latitude. <s> SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each city, list their names in decreasing order by their highest station latitude. <s> SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate. <s> SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the dates that have the 5 highest cloud cover rates and what are the rates? <s> SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the ids and durations of the trips with the top 3 durations? <s> SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the ids of the trips that lasted the longest and how long did they last? <s> SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each station, return its longitude and the average duration of trips that started from the station. <s> SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each start station id, what is its name, longitude and average duration of trips started there? <s> SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each station, find its latitude and the minimum duration of trips that ended at the station. <s> SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> For each end station id, what is its name, latitude, and minimum duration for trips ended there? <s> SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> List all the distinct stations from which a trip of duration below 100 started. <s> SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are all the different start station names for a trip that lasted less than 100? <s> SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Find all the zip codes in which the max dew point have never reached 70. <s> SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are all the different zip codes that have a maximum dew point that was always below 70? <s> SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103. <s> SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103) </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103? <s> SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103) </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the dates in which the mean sea level pressure was between 30.3 and 31? <s> SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the dates that have an average sea level pressure between 30.3 and 31? <s> SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference. <s> SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the days that had the smallest temperature range, and what was that range? <s> SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the id and name of the stations that have ever had more than 12 bikes available? <s> SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the different ids and names of the stations that have had more than 12 bikes available? <s> SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place. <s> SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there? <s> SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times? <s> SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips <s> SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100 </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> How many trips started from Mountain View city and ended at Palo Alto city? <s> SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  "Mountain View" AND T3.city  =  "Palo Alto" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> How many trips stated from  a station in Mountain View and ended at one in Palo Alto? <s> SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  "Mountain View" AND T3.city  =  "Palo Alto" </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the average latitude and longitude of the starting points of all trips? <s> SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id </s>
--SEPARATOR--
station <c> id <t> number <c> name <t> text <c> lat <t> number <c> long <t> number <c> dock_count <t> number <c> city <t> text <c> installation_date <t> text </t> status <c> station_id <t> number <c> bikes_available <t> number <c> docks_available <t> number <c> time <t> text </t> trip <c> id <t> number <c> duration <t> number <c> start_date <t> text <c> start_station_name <t> text <c> start_station_id <t> number <c> end_date <t> text <c> end_station_name <t> text <c> end_station_id <t> number <c> bike_id <t> number <c> subscription_type <t> text <c> zip_code <t> number </t> weather <c> date <t> text <c> max_temperature_f <t> number <c> mean_temperature_f <t> number <c> min_temperature_f <t> number <c> max_dew_point_f <t> number <c> mean_dew_point_f <t> number <c> min_dew_point_f <t> number <c> max_humidity <t> number <c> mean_humidity <t> number <c> min_humidity <t> number <c> max_sea_level_pressure_inches <t> number <c> mean_sea_level_pressure_inches <t> number <c> min_sea_level_pressure_inches <t> number <c> max_visibility_miles <t> number <c> mean_visibility_miles <t> number <c> min_visibility_miles <t> number <c> max_wind_Speed_mph <t> number <c> mean_wind_speed_mph <t> number <c> max_gust_speed_mph <t> number <c> precipitation_inches <t> number <c> cloud_cover <t> number <c> events <t> text <c> wind_dir_degrees <t> number <c> zip_code <t> number <i> What is the average latitude and longitude of all starting stations for the trips? <s> SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> How many books are there? <s> SELECT count(*) FROM book </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> List the writers of the books in ascending alphabetical order. <s> SELECT Writer FROM book ORDER BY Writer ASC </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> List the titles of the books in ascending order of issues. <s> SELECT Title FROM book ORDER BY Issues ASC </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> What are the titles of the books whose writer is not "Elaine Lee"? <s> SELECT Title FROM book WHERE Writer != "Elaine Lee" </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> What are the title and issues of the books? <s> SELECT Title ,  Issues FROM book </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> What are the dates of publications in descending order of price? <s> SELECT Publication_Date FROM publication ORDER BY Price DESC </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> What are the distinct publishers of publications with price higher than 5000000? <s> SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000 </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> List the publisher of the publication with the highest price. <s> SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1 </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> List the publication dates of publications with 3 lowest prices. <s> SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3 </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> Show the title and publication dates of books. <s> SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> Show writers who have published a book with price more than 4000000. <s> SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000 </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> Show the titles of books in descending order of publication price. <s> SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> Show publishers that have more than one publication. <s> SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1 </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> Show different publishers together with the number of publications they have. <s> SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> Please show the most common publication date. <s> SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> List the writers who have written more than one book. <s> SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1 </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> List the titles of books that are not published. <s> SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication) </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. <s> SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000 </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> What is the number of distinct publication dates? <s> SELECT COUNT (DISTINCT Publication_Date) FROM publication </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> How many distinct publication dates are there in our record? <s> SELECT COUNT (DISTINCT Publication_Date) FROM publication </s>
--SEPARATOR--
publication <c> Publication_ID <t> number <c> Book_ID <t> number <c> Publisher <t> text <c> Publication_Date <t> text <c> Price <t> number </t> book <c> Book_ID <t> number <c> Title <t> text <c> Issues <t> number <c> Writer <t> text <i> Show the prices of publications whose publisher is either "Person" or "Wiley" <s> SELECT Price FROM publication WHERE Publisher  =  "Person" OR Publisher  =  "Wiley" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> How many actors are there? <s> SELECT count(*) FROM actor </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Count the number of actors. <s> SELECT count(*) FROM actor </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> List the name of actors in ascending alphabetical order. <s> SELECT Name FROM actor ORDER BY Name ASC </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the names of actors, ordered alphabetically? <s> SELECT Name FROM actor ORDER BY Name ASC </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the characters and duration of actors? <s> SELECT Character ,  Duration FROM actor </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Return the characters and durations for each actor. <s> SELECT Character ,  Duration FROM actor </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> List the name of actors whose age is not 20. <s> SELECT Name FROM actor WHERE Age != 20 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the names of actors who are not 20 years old? <s> SELECT Name FROM actor WHERE Age != 20 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the characters of actors in descending order of age? <s> SELECT Character FROM actor ORDER BY age DESC </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Return the characters for actors, ordered by age descending. <s> SELECT Character FROM actor ORDER BY age DESC </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What is the duration of the oldest actor? <s> SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Return the duration of the actor with the greatest age. <s> SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the names of musicals with nominee "Bob Fosse"? <s> SELECT Name FROM musical WHERE Nominee  =  "Bob Fosse" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Return the names of musicals who have the nominee Bob Fosse. <s> SELECT Name FROM musical WHERE Nominee  =  "Bob Fosse" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the distinct nominees of the musicals with the award that is not "Tony Award"? <s> SELECT DISTINCT Nominee FROM musical WHERE Award != "Tony Award" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Return the different nominees of musicals that have an award that is not the Tony Award. <s> SELECT DISTINCT Nominee FROM musical WHERE Award != "Tony Award" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Show names of actors and names of musicals they are in. <s> SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the names of actors and the musicals that they are in? <s> SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Show names of actors that have appeared in musical with name "The Phantom of the Opera". <s> SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  "The Phantom of the Opera" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the names of actors who have been in the musical titled The Phantom of the Opera? <s> SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  "The Phantom of the Opera" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Show names of actors in descending order of the year their musical is awarded. <s> SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the names of actors ordered descending by the year in which their musical was awarded? <s> SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Show names of musicals and the number of actors who have appeared in the musicals. <s> SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> How many actors have appeared in each musical? <s> SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Show names of musicals which have at least three actors. <s> SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the names of musicals who have at 3 or more actors? <s> SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Show different nominees and the number of musicals they have been nominated. <s> SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> How many musicals has each nominee been nominated for? <s> SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Please show the nominee who has been nominated the greatest number of times. <s> SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Who is the nominee who has been nominated for the most musicals? <s> SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> List the most common result of the musicals. <s> SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Return the most frequent result across all musicals. <s> SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> List the nominees that have been nominated more than two musicals. <s> SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Who are the nominees who have been nominated more than two times? <s> SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2 </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> List the name of musicals that do not have actors. <s> SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor) </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> What are the names of musicals who have no actors? <s> SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor) </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Show the nominees that have nominated musicals for both "Tony Award" and "Drama Desk Award". <s> SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? <s> SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Show the musical nominee with award "Bob Fosse" or "Cleavant Derricks". <s> SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks" </s>
--SEPARATOR--
musical <c> Musical_ID <t> number <c> Name <t> text <c> Year <t> number <c> Award <t> text <c> Category <t> text <c> Nominee <t> text <c> Result <t> text </t> actor <c> Actor_ID <t> number <c> Name <t> text <c> Musical_ID <t> number <c> Character <t> text <c> Duration <t> text <c> age <t> number <i> Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? <s> SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks" </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the emails of the user named "Mary". <s> SELECT email FROM user_profiles WHERE name  =  'Mary' </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> What is the partition id of the user named "Iron Man". <s> SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man' </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> How many users are there? <s> SELECT count(*) FROM user_profiles </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> How many followers does each user have? <s> SELECT count(*) FROM follows </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the number of followers for each user. <s> SELECT count(*) FROM follows GROUP BY f1 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the number of tweets in record. <s> SELECT count(*) FROM tweets </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the number of users who posted some tweets. <s> SELECT count(DISTINCT UID) FROM tweets </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the name and email of the user whose name contains the word ‘Swift’. <s> SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%' </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the names of users whose emails contain ‘superstar’ or ‘edu’. <s> SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%' </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Return the text of tweets about the topic 'intern'. <s> SELECT text FROM tweets WHERE text LIKE '%intern%' </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the name and email of the users who have more than 1000 followers. <s> SELECT name ,  email FROM user_profiles WHERE followers  >  1000 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the names of the users whose number of followers is greater than that of the user named "Tyler Swift". <s> SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift') </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the name and email for the users who have more than one follower. <s> SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the names of users who have more than one tweet. <s> SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the id of users who are followed by Mary and Susan. <s> SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  "Mary" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  "Susan" </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the id of users who are followed by Mary or Susan. <s> SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  "Mary" OR T1.name  =  "Susan" </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the name of the user who has the largest number of followers. <s> SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the name and email of the user followed by the least number of people. <s> SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> List the name and number of followers for each user, and sort the results by the number of followers in descending order. <s> SELECT name ,  followers FROM user_profiles ORDER BY followers DESC </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> List the names of 5 users followed by the largest number of other users. <s> SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> List the text of all tweets in the order of date. <s> SELECT text FROM tweets ORDER BY createdate </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the name of each user and number of tweets tweeted by each of them. <s> SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the name and partition id for users who tweeted less than twice. <s> SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the name of the user who tweeted more than once, and number of tweets tweeted by them. <s> SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1 </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the average number of followers for the users who do not have any tweet. <s> SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets) </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the average number of followers for the users who had some tweets. <s> SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets) </s>
--SEPARATOR--
follows <c> f1 <t> number <c> f2 <t> number </t> tweets <c> id <t> number <c> uid <t> number <c> text <t> text <c> createdate <t> time </t> user_profiles <c> uid <t> number <c> name <t> text <c> email <t> text <c> partitionid <t> number <c> followers <t> number <i> Find the maximum and total number of followers of all users. <s> SELECT max(followers) ,  sum(followers) FROM user_profiles </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the names of all the catalog entries. <s> SELECT distinct(catalog_entry_name) FROM catalog_contents </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What are all the catalog entry names? <s> SELECT distinct(catalog_entry_name) FROM catalog_contents </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the list of attribute data types possessed by more than 3 attribute definitions. <s> SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What are the attribute data types with more than 3 attribute definitions? <s> SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What is the attribute data type of the attribute with name "Green"? <s> SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  "Green" </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the attribute data type for the attribute named "Green". <s> SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  "Green" </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the name and level of catalog structure with level between 5 and 10. <s> SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What are the name and level of catalog structure with level number between 5 and 10 <s> SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find all the catalog publishers whose name contains "Murray" <s> SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%" </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Which catalog publishers have substring "Murray" in their names? <s> SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%" </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Which catalog publisher has published the most catalogs? <s> SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the catalog publisher that has the most catalogs. <s> SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the names and publication dates of all catalogs that have catalog level number greater than 5. <s> SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What are the name and publication date of the catalogs with catalog level number above 5? <s> SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What are the entry names of catalog with the attribute possessed by most entries. <s> SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1) </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the entry names of the catalog with the attribute that have the most entries. <s> SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1) </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What is the entry name of the most expensive catalog (in USD)? <s> SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the entry name of the catalog with the highest price (in USD). <s> SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What is the level name of the cheapest catalog (in USD)? <s> SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the level name of the catalog with the lowest price (in USD). <s> SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What are the average and minimum price (in Euro) of all products? <s> SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Give me the average and minimum price (in Euro) of the products. <s> SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What is the product with the highest height? Give me the catalog entry name. <s> SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Which catalog content has the highest height? Give me the catalog entry name. <s> SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the name of the product that has the smallest capacity. <s> SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Which catalog content has the smallest capacity? Return the catalog entry name. <s> SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the names of all the products whose stock number starts with "2". <s> SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE "2%" </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Which catalog contents have a product stock number that starts from "2"? Show the catalog entry names. <s> SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE "2%" </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the names of catalog entries with level number 8. <s> SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  "8" </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What are the names of catalog entries with level number 8? <s> SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  "8" </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the names of the products with length smaller than 3 or height greater than 5. <s> SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Which catalog contents have length below 3 or above 5? Find the catalog entry names. <s> SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the name and attribute ID of the attribute definitions with attribute value 0. <s> SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID. <s> SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the name and capacity of products with price greater than 700 (in USD). <s> SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. <s> SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the dates on which more than one revisions were made. <s> SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> On which days more than one revisions were made on catalogs. <s> SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> How many products are there in the records? <s> SELECT count(*) FROM catalog_contents </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Find the total number of catalog contents. <s> SELECT count(*) FROM catalog_contents </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> Name all the products with next entry ID greater than 8. <s> SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8 </s>
--SEPARATOR--
Attribute_Definitions <c> attribute_id <t> number <c> attribute_name <t> text <c> attribute_data_type <t> text </t> Catalogs <c> catalog_id <t> number <c> catalog_name <t> text <c> catalog_publisher <t> text <c> date_of_publication <t> time <c> date_of_latest_revision <t> time </t> Catalog_Structure <c> catalog_level_number <t> number <c> catalog_id <t> number <c> catalog_level_name <t> text </t> Catalog_Contents <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> parent_entry_id <t> number <c> previous_entry_id <t> number <c> next_entry_id <t> number <c> catalog_entry_name <t> text <c> product_stock_number <t> text <c> price_in_dollars <t> number <c> price_in_euros <t> number <c> price_in_pounds <t> number <c> capacity <t> text <c> length <t> text <c> height <t> text <c> width <t> text </t> Catalog_Contents_Additional_Attributes <c> catalog_entry_id <t> number <c> catalog_level_number <t> number <c> attribute_id <t> number <c> attribute_value <t> text <i> What are the catalog entry names of the products with next entry ID above 8? <s> SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> How many aircrafts do we have? <s> SELECT count(*) FROM Aircraft </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> How many aircrafts exist in the database? <s> SELECT count(*) FROM Aircraft </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show name and distance for all aircrafts. <s> SELECT name ,  distance FROM Aircraft </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names and distances for all airplanes? <s> SELECT name ,  distance FROM Aircraft </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show ids for all aircrafts with more than 1000 distance. <s> SELECT aid FROM Aircraft WHERE distance  >  1000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the ids of all aircrafts that can cover a distance of more than 1000? <s> SELECT aid FROM Aircraft WHERE distance  >  1000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> How many aircrafts have distance between 1000 and 5000? <s> SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the count of aircrafts that have a distance between 1000 and 5000? <s> SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name and distance for aircraft with id 12? <s> SELECT name ,  distance FROM Aircraft WHERE aid  =  12 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name and distance for the aircraft that has an id of 12? <s> SELECT name ,  distance FROM Aircraft WHERE aid  =  12 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the minimum, average, and maximum distance of all aircrafts. <s> SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Return the minimum, average and maximum distances traveled across all aircrafts. <s> SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the id and name of the aircraft with the maximum distance. <s> SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the id and name of the aircraft that can cover the maximum distance? <s> SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the name of aircrafts with top three lowest distances. <s> SELECT name FROM Aircraft ORDER BY distance LIMIT 3 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the aircrafts with top 3 shortest lengthes? List their names. <s> SELECT name FROM Aircraft ORDER BY distance LIMIT 3 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show names for all aircrafts with distances more than the average. <s> SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft) </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names of all aircrafts that can cover more distances than average? <s> SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft) </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> How many employees do we have? <s> SELECT count(*) FROM Employee </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the number of employees? <s> SELECT count(*) FROM Employee </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show name and salary for all employees sorted by salary. <s> SELECT name ,  salary FROM Employee ORDER BY salary </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name and salary of all employees in order of salary? <s> SELECT name ,  salary FROM Employee ORDER BY salary </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show ids for all employees with at least 100000 salary. <s> SELECT eid FROM Employee WHERE salary  >  100000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the id of every employee who has at least a salary of  100000? <s> SELECT eid FROM Employee WHERE salary  >  100000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> How many employees have salary between 100000 and 200000? <s> SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the number of employees that have a salary between 100000 and 200000? <s> SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name and salary for employee with id 242518965? <s> SELECT name ,  salary FROM Employee WHERE eid  =  242518965 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name and salary of the employee with the id 242518965? <s> SELECT name ,  salary FROM Employee WHERE eid  =  242518965 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is average and maximum salary of all employees. <s> SELECT avg(salary) ,  max(salary) FROM Employee </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the average and largest salary of all employees? <s> SELECT avg(salary) ,  max(salary) FROM Employee </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the id and name of the employee with maximum salary. <s> SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the id and name of the employee with the highest salary? <s> SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the name of employees with three lowest salaries. <s> SELECT name FROM Employee ORDER BY salary ASC LIMIT 3 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name of the 3 employees who get paid the least? <s> SELECT name FROM Employee ORDER BY salary ASC LIMIT 3 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show names for all employees with salary more than the average. <s> SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee) </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names of all employees who have a salary higher than average? <s> SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee) </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the id and salary of Mark Young. <s> SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young' </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the id and salary of the employee named Mark Young? <s> SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young' </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> How many flights do we have? <s> SELECT count(*) FROM Flight </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the number of flights? <s> SELECT count(*) FROM Flight </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show flight number, origin, destination of all flights in the alphabetical order of the departure cities. <s> SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the flight number, origin, and destination for all flights in alphabetical order by departure cities? <s> SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show all flight number from Los Angeles. <s> SELECT flno FROM Flight WHERE origin  =  "Los Angeles" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the numbers of all flights coming from Los Angeles? <s> SELECT flno FROM Flight WHERE origin  =  "Los Angeles" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show origins of all flights with destination Honolulu. <s> SELECT origin FROM Flight WHERE destination  =  "Honolulu" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the origins of all flights that are headed to Honolulu? <s> SELECT origin FROM Flight WHERE destination  =  "Honolulu" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show me the departure date and arrival date for all flights from Los Angeles to Honolulu. <s> SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the departure and arrival dates of all flights from LA to Honolulu? <s> SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show flight number for all flights with more than 2000 distance. <s> SELECT flno FROM Flight WHERE distance  >  2000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the numbers of all flights that can cover a distance of more than 2000? <s> SELECT flno FROM Flight WHERE distance  >  2000 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the average price for flights from Los Angeles to Honolulu. <s> SELECT avg(price) FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the average price for flights from LA to Honolulu? <s> SELECT avg(price) FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show origin and destination for flights with price higher than 300. <s> SELECT origin ,  destination FROM Flight WHERE price  >  300 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the origin and destination for all flights whose price is higher than 300? <s> SELECT origin ,  destination FROM Flight WHERE price  >  300 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the flight number and distance of the flight with maximum price. <s> SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the flight number and its distance for the one with the maximum price? <s> SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the flight number of flights with three lowest distances. <s> SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the numbers of the shortest flights? <s> SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the average distance and average price for flights from Los Angeles. <s> SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  "Los Angeles" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the average distance and price for all flights from LA? <s> SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  "Los Angeles" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show all origins and the number of flights from each origin. <s> SELECT origin ,  count(*) FROM Flight GROUP BY origin </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> For each origin, how many flights came from there? <s> SELECT origin ,  count(*) FROM Flight GROUP BY origin </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show all destinations and the number of flights to each destination. <s> SELECT destination ,  count(*) FROM Flight GROUP BY destination </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the destinations and number of flights to each one? <s> SELECT destination ,  count(*) FROM Flight GROUP BY destination </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Which origin has most number of flights? <s> SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What place has the most flights coming from there? <s> SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Which destination has least number of flights? <s> SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What destination has the fewest number of flights? <s> SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the aircraft name for the flight with number 99 <s> SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name of the aircraft that was on flight number 99? <s> SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show all flight numbers with aircraft Airbus A340-300. <s> SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  "Airbus A340-300" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the flight numbers for the aircraft Airbus A340-300? <s> SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  "Airbus A340-300" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show aircraft names and number of flights for each aircraft. <s> SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name of each aircraft and how many flights does each one complete? <s> SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show names for all aircraft with at least two flights. <s> SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names for all aircrafts with at least 2 flights? <s> SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> How many employees have certificate. <s> SELECT count(DISTINCT eid) FROM Certificate </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the count of distinct employees with certificates? <s> SELECT count(DISTINCT eid) FROM Certificate </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show ids for all employees who don't have a certificate. <s> SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the ids of all employees that don't have certificates? <s> SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show names for all aircrafts of which John Williams has certificates. <s> SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  "John Williams" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names of all aircrafts that John Williams have certificates to be able to fly? <s> SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  "John Williams" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show names for all employees who have certificate of Boeing 737-800. <s> SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names of all employees who have a certificate to fly Boeing 737-800? <s> SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300. <s> SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Airbus A340-300" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300? <s> SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Airbus A340-300" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show names for all employees who do not have certificate of Boeing 737-800. <s> SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names of all employees who are not certified to fly Boeing 737-800s? <s> SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800" </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the name of aircraft which fewest people have its certificate. <s> SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What are the names of the aircraft that the least people are certified to fly? <s> SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate. <s> SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly? <s> SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> what is the salary and name of the employee who has the most number of aircraft certificates? <s> SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the salaray and name of the employee that is certified to fly the most planes? <s> SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000? <s> SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
flight <c> flno <t> number <c> origin <t> text <c> destination <t> text <c> distance <t> number <c> departure_date <t> time <c> arrival_date <t> time <c> price <t> number <c> aid <t> number </t> aircraft <c> aid <t> number <c> name <t> text <c> distance <t> number </t> employee <c> eid <t> number <c> name <t> text <c> salary <t> number </t> certificate <c> eid <t> number <c> aid <t> number <i> What is the salaray and name of the employee with the most certificates to fly planes more than 5000? <s> SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many allergies are there? <s> SELECT count(DISTINCT allergy) FROM Allergy_type </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many allergy entries are there? <s> SELECT count(DISTINCT allergy) FROM Allergy_type </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many different allergy types exist? <s> SELECT count(DISTINCT allergytype) FROM Allergy_type </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many distinct allergies are there? <s> SELECT count(DISTINCT allergytype) FROM Allergy_type </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all allergy types. <s> SELECT DISTINCT allergytype FROM Allergy_type </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the different allergy types? <s> SELECT DISTINCT allergytype FROM Allergy_type </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all allergies and their types. <s> SELECT allergy ,  allergytype FROM Allergy_type </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the allergies and their types? <s> SELECT allergy ,  allergytype FROM Allergy_type </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all allergies with type food. <s> SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  "food" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are all the different food allergies? <s> SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  "food" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What is the type of allergy Cat? <s> SELECT allergytype FROM Allergy_type WHERE allergy  =  "Cat" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What is allergy type of a cat allergy? <s> SELECT allergytype FROM Allergy_type WHERE allergy  =  "Cat" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many allergies have type animal? <s> SELECT count(*) FROM Allergy_type WHERE allergytype  =  "animal" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many animal type allergies exist? <s> SELECT count(*) FROM Allergy_type WHERE allergytype  =  "animal" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all allergy types and the number of allergies in each type. <s> SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the allergy types and how many allergies correspond to each one? <s> SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which allergy type has most number of allergies? <s> SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which allergy type is most common? <s> SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which allergy type has least number of allergies? <s> SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which allergy type is the least common? <s> SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students are there? <s> SELECT count(*) FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What is the total number of students? <s> SELECT count(*) FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show first name and last name for all students. <s> SELECT Fname ,  Lname FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the full names of all students <s> SELECT Fname ,  Lname FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many different advisors are listed? <s> SELECT count(DISTINCT advisor) FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many advisors are there? <s> SELECT count(DISTINCT advisor) FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all majors. <s> SELECT DISTINCT Major FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the different majors? <s> SELECT DISTINCT Major FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all cities where students live. <s> SELECT DISTINCT city_code FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What cities do students live in? <s> SELECT DISTINCT city_code FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show first name, last name, age for all female students. Their sex is F. <s> SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F' </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the full names and ages for all female students whose sex is F? <s> SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F' </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show student ids for all male students. <s> SELECT StuID FROM Student WHERE Sex  =  'M' </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the student ids for all male students? <s> SELECT StuID FROM Student WHERE Sex  =  'M' </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students are age 18? <s> SELECT count(*) FROM Student WHERE age  =  18 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students are 18 years old? <s> SELECT count(*) FROM Student WHERE age  =  18 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all student ids who are older than 20. <s> SELECT StuID FROM Student WHERE age  >  20 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the student ids for students over 20 years old? <s> SELECT StuID FROM Student WHERE age  >  20 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which city does the student whose last name is "Kim" live in? <s> SELECT city_code FROM Student WHERE LName  =  "Kim" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Give the city that the student whose family name is Kim lives in. <s> SELECT city_code FROM Student WHERE LName  =  "Kim" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Who is the advisor of student with ID 1004? <s> SELECT Advisor FROM Student WHERE StuID  =  1004 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Who advises student 1004? <s> SELECT Advisor FROM Student WHERE StuID  =  1004 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students live in HKG or CHI? <s> SELECT count(*) FROM Student WHERE city_code  =  "HKG" OR city_code  =  "CHI" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Give the number of students living in either HKG or CHI. <s> SELECT count(*) FROM Student WHERE city_code  =  "HKG" OR city_code  =  "CHI" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show the minimum, average, and maximum age of all students. <s> SELECT min(age) ,  avg(age) ,  max(age) FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What is the minimum, mean, and maximum age across all students? <s> SELECT min(age) ,  avg(age) ,  max(age) FROM Student </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What is the last name of the youngest student? <s> SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student) </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Provide the last name of the youngest student. <s> SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student) </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show the student id of the oldest student. <s> SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student) </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What student id corresponds to the oldest student? <s> SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student) </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all majors and corresponding number of students. <s> SELECT major ,  count(*) FROM Student GROUP BY major </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students are there for each major? <s> SELECT major ,  count(*) FROM Student GROUP BY major </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which major has most number of students? <s> SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What is the largest major? <s> SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all ages and corresponding number of students. <s> SELECT age ,  count(*) FROM Student GROUP BY age </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How old is each student and how many students are each age? <s> SELECT age ,  count(*) FROM Student GROUP BY age </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show the average age for male and female students. <s> SELECT avg(age) ,  sex FROM Student GROUP BY sex </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the average ages for male and female students? <s> SELECT avg(age) ,  sex FROM Student GROUP BY sex </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all cities and corresponding number of students. <s> SELECT city_code ,  count(*) FROM Student GROUP BY city_code </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students live in each city? <s> SELECT city_code ,  count(*) FROM Student GROUP BY city_code </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all advisors and corresponding number of students. <s> SELECT advisor ,  count(*) FROM Student GROUP BY advisor </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students does each advisor have? <s> SELECT advisor ,  count(*) FROM Student GROUP BY advisor </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which advisor has most number of students? <s> SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Give the advisor with the most students. <s> SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students have cat allergies? <s> SELECT count(*) FROM Has_allergy WHERE Allergy  =  "Cat" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students are affected by cat allergies? <s> SELECT count(*) FROM Has_allergy WHERE Allergy  =  "Cat" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all student IDs who have at least two allergies. <s> SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the students ids of students who have more than one allergy? <s> SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the student ids of students who don't have any allergies? <s> SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which students are unaffected by allergies? <s> SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many female students have milk or egg allergies? <s> SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  "F" AND T1.allergy  =  "Milk" OR T1.allergy  =  "Eggs" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students who are female are allergic to milk or eggs? <s> SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  "F" AND T1.allergy  =  "Milk" OR T1.allergy  =  "Eggs" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students have a food allergy? <s> SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  "food" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students are affected by food related allergies? <s> SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  "food" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which allergy has most number of students affected? <s> SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Which allergy is the most common? <s> SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all allergies with number of students affected. <s> SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students have each different allergy? <s> SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Show all allergy type with number of students affected. <s> SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students are affected by each allergy type? <s> SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Find the last name and age of the student who has allergy to both milk and cat. <s> SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Milk" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  "Cat") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the last names and ages of the students who are allergic to milk and cat? <s> SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Milk" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  "Cat") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies. <s> SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  "Lisa" ORDER BY T1.Allergy </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names. <s> SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  "Lisa" ORDER BY T1.Allergy </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Find the first name and gender of the student who has allergy to milk but not cat. <s> SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Milk" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  "Cat") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the first name and gender of the students who have allergy to milk but can put up with cats? <s> SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Milk" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  "Cat") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Find the average age of the students who have allergies with food and animal types. <s> SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "animal") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How old are the students with allergies to food and animal types on average? <s> SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "animal") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> List the first and last name of the students who do not have any food type allergy. <s> SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What is the full name of each student who is not allergic to any type of food. <s> SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Find the number of male (sex is 'M') students who have some food type allery. <s> SELECT count(*) FROM Student WHERE sex  =  "M" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many male students (sex is 'M') are allergic to any type of food? <s> SELECT count(*) FROM Student WHERE sex  =  "M" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Find the different first names and cities of the students who have allergy to milk or cat. <s> SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  "Milk" OR T2.Allergy  =  "Cat" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the distinct first names and cities of the students who have allergy either to milk or to cat? <s> SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  "Milk" OR T2.Allergy  =  "Cat" </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Find the number of students who are older than 18 and do not have allergy to either food or animal. <s> SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food" OR T2.allergytype  =  "animal") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> How many students are over 18 and do not have allergy to food type or animal type? <s> SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food" OR T2.allergytype  =  "animal") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> Find the first name and major of the students who are not allegry to soy. <s> SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Soy") </s>
--SEPARATOR--
Allergy_Type <c> Allergy <t> text <c> AllergyType <t> text </t> Has_Allergy <c> StuID <t> number <c> Allergy <t> text </t> Student <c> StuID <t> number <c> LName <t> text <c> Fname <t> text <c> Age <t> number <c> Sex <t> text <c> Major <t> number <c> Advisor <t> number <c> city_code <t> text <i> What are the first name and major of the students who are able to consume soy? <s> SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Soy") </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> A list of the top 5 countries by number of invoices. List country name and number of invoices. <s> SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the top 5 countries by number of invoices and how many do they have? <s> SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size. <s> SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of the top 8 countries by total invoice size and what are those sizes? <s> SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> A list of the top 10 countries by average invoice size. List country name and average invoice size. <s> SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of the countries and average invoice size of the top countries by size? <s> SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Find out 5 customers who most recently purchased something. List customers' first and last name. <s> SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the first and last names of the 5 customers who purchased something most recently? <s> SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders. <s> SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the top 10 customers' first and last names by total number of orders and how many orders did they make? <s> SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the top 10 customers by total gross sales. List customers' first and last name and total gross sales. <s> SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales? <s> SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the top 5 genres by number of tracks. List genres name and total tracks. <s> SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many tracks does each genre have and what are the names of the top 5? <s> SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List every album's title. <s> SELECT title FROM albums; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the titles of all the albums? <s> SELECT title FROM albums; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List every album ordered by album title in ascending order. <s> SELECT title FROM albums ORDER BY title; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the titles of all the albums alphabetically ascending? <s> SELECT title FROM albums ORDER BY title; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List every album whose title starts with A in alphabetical order. <s> SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the titles of all albums that start with A in alphabetical order? <s> SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the customers first and last name of 10 least expensive invoices. <s> SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the first and last names of the customers with the 10 cheapest invoices? <s> SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List total amount of  invoice from Chicago, IL. <s> SELECT sum(total) FROM invoices WHERE billing_city  =  "Chicago" AND billing_state  =  "IL"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the total amount of money in the invoices billed from Chicago, Illinois? <s> SELECT sum(total) FROM invoices WHERE billing_city  =  "Chicago" AND billing_state  =  "IL"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the number of invoices from Chicago, IL. <s> SELECT COUNT(*) FROM invoices WHERE billing_city  =  "Chicago" AND billing_state  =  "IL"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many invoices were billed from Chicago, IL? <s> SELECT COUNT(*) FROM invoices WHERE billing_city  =  "Chicago" AND billing_state  =  "IL"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the number of invoices from the US, grouped by state. <s> SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many invoices were billed from each state? <s> SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the state in the US with the most invoices. <s> SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the states with the most invoices? <s> SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the number of invoices and the invoice total from California. <s> SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  "CA"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the number of invoices and total money billed in them from CA? <s> SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  "CA"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List Aerosmith's albums. <s> SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = "Aerosmith"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the titles of all the Aerosmith albums? <s> SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = "Aerosmith"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many albums does Billy Cobham has? <s> SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = "Billy Cobham"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many albums has Billy Cobam released? <s> SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = "Billy Cobham"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Eduardo Martins is a customer at which company? <s> SELECT company FROM customers WHERE first_name = "Eduardo" AND last_name = "Martins"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the company where Eduardo Martins is a customer? <s> SELECT company FROM customers WHERE first_name = "Eduardo" AND last_name = "Martins"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is Astrid Gruber's email and phone number? <s> SELECT email ,  phone FROM customers WHERE first_name = "Astrid" AND last_name = "Gruber"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the email and phone number of Astrid Gruber the customer? <s> SELECT email ,  phone FROM customers WHERE first_name = "Astrid" AND last_name = "Gruber"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many customers live in Prague city? <s> SELECT count(*) FROM customers WHERE city = "Prague"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many customers live in the city of Prague? <s> SELECT count(*) FROM customers WHERE city = "Prague"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many customers in state of CA? <s> SELECT count(*) FROM customers WHERE state = "CA"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many customers are from California? <s> SELECT count(*) FROM customers WHERE state = "CA"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What country does Roberto Almeida live? <s> SELECT country FROM customers WHERE first_name = "Roberto" AND last_name = "Almeida"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> In which country does Roberto Almeida? <s> SELECT country FROM customers WHERE first_name = "Roberto" AND last_name = "Almeida"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the name of albums that are released by aritist whose name has 'Led' <s> SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%' </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the title of the album that was released by the artist whose name has the phrase 'Led'? <s> SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%' </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many customers does Steve Johnson support? <s> SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = "Steve" AND T1.last_name = "Johnson"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the count of customers that Steve Johnson supports? <s> SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = "Steve" AND T1.last_name = "Johnson"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the title, phone and hire date of Nancy Edwards? <s> SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the title, phone number and hire date for the employee named Nancy Edwards? <s> SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> find the full name of employees who report to Nancy Edwards? <s> SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = "Nancy" AND T1.last_name = "Edwards"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the first and last name of the employee who reports to Nancy Edwards? <s> SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = "Nancy" AND T1.last_name = "Edwards"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the address of employee Nancy Edwards? <s> SELECT address FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is Nancy Edwards's address? <s> SELECT address FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Find the full name of employee who supported the most number of customers. <s> SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the full name of the employee who has the most customers? <s> SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many employees are living in Canada? <s> SELECT count(*) FROM employees WHERE country = "Canada"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many employees live in Canada? <s> SELECT count(*) FROM employees WHERE country = "Canada"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is employee Nancy Edwards's phone number? <s> SELECT phone FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the the phone number of Nancy Edwards? <s> SELECT phone FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Who is the youngest employee in the company? List employee's first and last name. <s> SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What si the youngest employee's first and last name? <s> SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List top 10 employee work longest in the company. List employee's first and last name. <s> SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the first and last names of the top 10 longest-serving employees? <s> SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Find the number of employees whose title is IT Staff from each city? <s> SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many employees who are IT staff are from each city? <s> SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee. <s> SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the first and last names of all the employees and how many people report to them? <s> SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many orders does Lucas Mancini has? <s> SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many orders does Luca Mancini have in his invoices? <s> SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the total amount of money spent by Lucas Mancini? <s> SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How much money did Lucas Mancini spend? <s> SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List all media types. <s> SELECT name FROM media_types; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of all the media types? <s> SELECT name FROM media_types; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List all different genre types. <s> SELECT DISTINCT name FROM genres; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the different names of the genres? <s> SELECT DISTINCT name FROM genres; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the name of all playlist. <s> SELECT name FROM playlists; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of all the playlists? <s> SELECT name FROM playlists; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Who is the composer of track Fast As a Shark? <s> SELECT composer FROM tracks WHERE name = "Fast As a Shark"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the composer who created the track "Fast As a Shark"? <s> SELECT composer FROM tracks WHERE name = "Fast As a Shark"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How long does track Fast As a Shark has? <s> SELECT milliseconds FROM tracks WHERE name = "Fast As a Shark"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many milliseconds long is Fast As a Shark? <s> SELECT milliseconds FROM tracks WHERE name = "Fast As a Shark"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the name of tracks whose genre is Rock? <s> SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the name of all tracks in the Rock genre? <s> SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is title of album which track Balls to the Wall belongs to? <s> SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = "Balls to the Wall"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the name of the album that has the track Ball to the Wall? <s> SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = "Balls to the Wall"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List name of all tracks in Balls to the Wall. <s> SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = "Balls to the Wall"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the name of all tracks in the album named Balls to the Wall? <s> SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = "Balls to the Wall"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List title of albums have the number of tracks greater than 10. <s> SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of the albums that have more than 10 tracks? <s> SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the name of tracks belongs to genre Rock and whose media type is MPEG audio file. <s> SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" AND T3.name = "MPEG audio file"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of all Rock tracks that are stored on MPEG audio files? <s> SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" AND T3.name = "MPEG audio file"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the name of tracks belongs to genre Rock or media type is MPEG audio file. <s> SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" OR T3.name = "MPEG audio file"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of all tracks that belong to the Rock genre and whose media type is MPEG? <s> SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" OR T3.name = "MPEG audio file"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the name of tracks belongs to genre Rock or genre Jazz. <s> SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock" OR T1.name = "Jazz" </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of the tracks that are Rock or Jazz songs? <s> SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock" OR T1.name = "Jazz" </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the name of all tracks in the playlists of Movies. <s> SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = "Movies"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of all tracks that are on playlists titled Movies? <s> SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = "Movies"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List the name of playlist which has number of tracks greater than 100. <s> SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of all playlists that have more than 100 tracks? <s> SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> List all tracks bought by customer Daan Peeters. <s> SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = "Daan" AND T4.last_name = "Peeters"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the tracks that Dean Peeters bought? <s> SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = "Daan" AND T4.last_name = "Peeters"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How much is the track Fast As a Shark? <s> SELECT unit_price FROM tracks WHERE name = "Fast As a Shark"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What is the unit price of the tune "Fast As a Shark"? <s> SELECT unit_price FROM tracks WHERE name = "Fast As a Shark"; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Find the name of tracks which are in Movies playlist but not in music playlist. <s> SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music' </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of all tracks that are on the Movies playlist but not in the music playlist? <s> SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music' </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Find the name of tracks which are in both Movies and music playlists. <s> SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music' </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> What are the names of all the tracks that are in both the Movies and music playlists? <s> SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music' </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> Find number of tracks in each genre? <s> SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name; </s>
--SEPARATOR--
artists <c> id <t> number <c> name <t> text </t> sqlite_sequence <c> name <t> text <c> seq <t> text </t> albums <c> id <t> number <c> title <t> text <c> artist_id <t> number </t> employees <c> id <t> number <c> last_name <t> text <c> first_name <t> text <c> title <t> text <c> reports_to <t> number <c> birth_date <t> time <c> hire_date <t> time <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text </t> customers <c> id <t> number <c> first_name <t> text <c> last_name <t> text <c> company <t> text <c> address <t> text <c> city <t> text <c> state <t> text <c> country <t> text <c> postal_code <t> text <c> phone <t> text <c> fax <t> text <c> email <t> text <c> support_rep_id <t> number </t> genres <c> id <t> number <c> name <t> text </t> invoices <c> id <t> number <c> customer_id <t> number <c> invoice_date <t> time <c> billing_address <t> text <c> billing_city <t> text <c> billing_state <t> text <c> billing_country <t> text <c> billing_postal_code <t> text <c> total <t> number </t> media_types <c> id <t> number <c> name <t> text </t> tracks <c> id <t> number <c> name <t> text <c> album_id <t> number <c> media_type_id <t> number <c> genre_id <t> number <c> composer <t> text <c> milliseconds <t> number <c> bytes <t> number <c> unit_price <t> number </t> invoice_lines <c> id <t> number <c> invoice_id <t> number <c> track_id <t> number <c> unit_price <t> number <c> quantity <t> number </t> playlists <c> id <t> number <c> name <t> text </t> playlist_tracks <c> playlist_id <t> number <c> track_id <t> number <i> How many tracks are in each genre? <s> SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name; </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> How many editors are there? <s> SELECT count(*) FROM editor </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> List the names of editors in ascending order of age. <s> SELECT Name FROM editor ORDER BY Age ASC </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> What are the names and ages of editors? <s> SELECT Name ,  Age FROM editor </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> List the names of editors who are older than 25. <s> SELECT Name FROM editor WHERE Age  >  25 </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> Show the names of editors of age either 24 or 25. <s> SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25 </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> What is the name of the youngest editor? <s> SELECT Name FROM editor ORDER BY Age ASC LIMIT 1 </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> What are the different ages of editors? Show each age along with the number of editors of that age. <s> SELECT Age ,  COUNT(*) FROM editor GROUP BY Age </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> Please show the most common age of editors. <s> SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> Show the distinct themes of journals. <s> SELECT DISTINCT Theme FROM journal </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> Show the names of editors and the theme of journals for which they serve on committees. <s> SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> For each journal_committee, find the editor name and the journal theme. <s> SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme. <s> SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> Show the names of editors that are on the committee of journals with sales bigger than 3000. <s> SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000 </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> Show the id, name of each editor and the number of journal committees they are on. <s> SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> Show the names of editors that are on at least two journal committees. <s> SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2 </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> List the names of editors that are not on any journal committee. <s> SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee) </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> List the date, theme and sales of the journal which did not have any of the listed editors serving on committee. <s> SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID </s>
--SEPARATOR--
journal <c> Journal_ID <t> number <c> Date <t> text <c> Theme <t> text <c> Sales <t> number </t> editor <c> Editor_ID <t> number <c> Name <t> text <c> Age <t> number </t> journal_committee <c> Editor_ID <t> number <c> Journal_ID <t> number <c> Work_Type <t> text <i> What is the average sales of the journals that have an editor whose work type is 'Photo'? <s> SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo' </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many accounts do we have? <s> SELECT count(*) FROM Accounts </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Count the number of accounts. <s> SELECT count(*) FROM Accounts </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show ids, customer ids, names for all accounts. <s> SELECT account_id ,  customer_id ,  account_name FROM Accounts </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the account ids, customer ids, and account names for all the accounts? <s> SELECT account_id ,  customer_id ,  account_name FROM Accounts </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show other account details for account with name 338. <s> SELECT other_account_details FROM Accounts WHERE account_name  =  "338" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the other account details for the account with the name 338? <s> SELECT other_account_details FROM Accounts WHERE account_name  =  "338" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the first name, last name, and phone of the customer with account name 162? <s> SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  "162" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Give the full name and phone of the customer who has the account name 162. <s> SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  "162" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many accounts does the customer with first name Art and last name Turcotte have? <s> SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Return the number of accounts that the customer with the first name Art and last name Turcotte has. <s> SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show all customer ids and the number of accounts for each customer. <s> SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many accounts are there for each customer id? <s> SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the customer id and number of accounts with most accounts. <s> SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the customer id of the customer with the most accounts, and how many accounts does this person have? <s> SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the customer first, last name and id with least number of accounts. <s> SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Give the full name and customer id of the customer with the fewest accounts. <s> SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the number of all customers without an account. <s> SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts) </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many customers do not have an account? <s> SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts) </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the first names and last names of customers without any account. <s> SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the full names of customers who do not have any accounts? <s> SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show distinct first and last names for all customers with an account. <s> SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the full names of customers who have accounts? <s> SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many customers have an account? <s> SELECT count(DISTINCT customer_id) FROM Accounts </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Count the number of customers who hold an account. <s> SELECT count(DISTINCT customer_id) FROM Accounts </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many customers do we have? <s> SELECT count(*) FROM Customers </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Count the number of customers. <s> SELECT count(*) FROM Customers </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show ids, first names, last names, and phones for all customers. <s> SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the ids, full names, and phones of each customer? <s> SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the phone and email for customer with first name Aniyah and last name Feest? <s> SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  "Aniyah" AND customer_last_name  =  "Feest" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Return the phone and email of the customer with the first name Aniyah and last name Feest. <s> SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  "Aniyah" AND customer_last_name  =  "Feest" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the number of customer cards. <s> SELECT count(*) FROM Customers_cards </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many customer cards are there? <s> SELECT count(*) FROM Customers_cards </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show ids, customer ids, card type codes, card numbers for all cards. <s> SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are card ids, customer ids, card types, and card numbers for each customer card? <s> SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the date valid from and the date valid to for the card with card number '4560596484842'. <s> SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  "4560596484842" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the valid from and valid to dates for the card with the number 4560596484842? <s> SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  "4560596484842" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the first name, last name, and phone of the customer with card 4560596484842. <s> SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  "4560596484842" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Return the full name and phone of the customer who has card number 4560596484842. <s> SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  "4560596484842" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many cards does customer Art Turcotte have? <s> SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Count the number of cards the customer with the first name Art and last name Turcotte has. <s> SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many debit cards do we have? <s> SELECT count(*) FROM Customers_cards WHERE card_type_code  =  "Debit" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Count the number of customer cards of the type Debit. <s> SELECT count(*) FROM Customers_cards WHERE card_type_code  =  "Debit" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many credit cards does customer Blanche Huels have? <s> SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Blanche" AND T2.customer_last_name  =  "Huels" AND T1.card_type_code  =  "Credit" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Count the number of credit cards that the customer with first name Blanche and last name Huels has. <s> SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Blanche" AND T2.customer_last_name  =  "Huels" AND T1.card_type_code  =  "Credit" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show all customer ids and the number of cards owned by each customer. <s> SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the different customer ids, and how many cards does each one hold? <s> SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the customer id with most number of cards, and how many does he have? <s> SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Return the id of the customer who has the most cards, as well as the number of cards. <s> SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show id, first and last names for all customers with at least two cards. <s> SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the ids and full names of customers who hold two or more cards? <s> SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the customer id, first and last name with least number of accounts. <s> SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Return the id and full name of the customer who has the fewest accounts. <s> SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show all card type codes and the number of cards in each type. <s> SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the different card types, and how many cards are there of each? <s> SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the card type code with most number of cards? <s> SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Return the code of the card type that is most common. <s> SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show card type codes with at least 5 cards. <s> SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the codes of card types that have 5 or more cards? <s> SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show all card type codes and the number of customers holding cards in each type. <s> SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the different card type codes, and how many different customers hold each type? <s> SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the customer ids and firstname without a credit card. <s> SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  "Credit" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the ids and first names of customers who do not hold a credit card? <s> SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  "Credit" </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show all card type codes. <s> SELECT DISTINCT card_type_code FROM Customers_Cards </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the different card type codes? <s> SELECT DISTINCT card_type_code FROM Customers_Cards </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the number of card types. <s> SELECT count(DISTINCT card_type_code) FROM Customers_Cards </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many different card types are there? <s> SELECT count(DISTINCT card_type_code) FROM Customers_Cards </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show all transaction types. <s> SELECT DISTINCT transaction_type FROM Financial_Transactions </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the different types of transactions? <s> SELECT DISTINCT transaction_type FROM Financial_Transactions </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the number of transaction types. <s> SELECT count(DISTINCT transaction_type) FROM Financial_Transactions </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> How many different types of transactions are there? <s> SELECT count(DISTINCT transaction_type) FROM Financial_Transactions </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the average and total transaction amount? <s> SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Return the average transaction amount, as well as the total amount of all transactions. <s> SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the card type codes and the number of transactions. <s> SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the different card types, and how many transactions have been made with each? <s> SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the transaction type and the number of transactions. <s> SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the different transaction types, and how many transactions of each have taken place? <s> SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What is the transaction type that has processed the greatest total amount in transactions? <s> SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Return the type of transaction with the highest total amount. <s> SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1 </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> Show the account id and the number of transactions for each account <s> SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id </s>
--SEPARATOR--
Accounts <c> account_id <t> number <c> customer_id <t> number <c> account_name <t> text <c> other_account_details <t> text </t> Customers <c> customer_id <t> number <c> customer_first_name <t> text <c> customer_last_name <t> text <c> customer_address <t> text <c> customer_phone <t> text <c> customer_email <t> text <c> other_customer_details <t> text </t> Customers_Cards <c> card_id <t> number <c> customer_id <t> number <c> card_type_code <t> text <c> card_number <t> text <c> date_valid_from <t> time <c> date_valid_to <t> time <c> other_card_details <t> text </t> Financial_Transactions <c> transaction_id <t> number <c> previous_transaction_id <t> number <c> account_id <t> number <c> card_id <t> number <c> transaction_type <t> text <c> transaction_date <t> time <c> transaction_amount <t> number <c> transaction_comment <t> text <c> other_transaction_details <t> text <i> What are the different account ids that have made financial transactions, as well as how many transactions correspond to each? <s> SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> How many tracks do we have? <s> SELECT count(*) FROM track </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Count the number of tracks. <s> SELECT count(*) FROM track </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show the name and location for all tracks. <s> SELECT name ,  LOCATION FROM track </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the names and locations of all tracks? <s> SELECT name ,  LOCATION FROM track </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show names and seatings, ordered by seating for all tracks opened after 2000. <s> SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the names and seatings for all tracks opened after 2000, ordered by seating? <s> SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What is the name, location and seating for the most recently opened track? <s> SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Return the name, location, and seating of the track that was opened in the most recent year. <s> SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What is the minimum, maximum, and average seating for all tracks. <s> SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Return the minimum, maximum, and average seating across all tracks. <s> SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show the name, location, open year for all tracks with a seating higher than the average. <s> SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track) </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the names, locations, and years of opening for tracks with seating higher than average? <s> SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track) </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are distinct locations where tracks are located? <s> SELECT DISTINCT LOCATION FROM track </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Give the different locations of tracks. <s> SELECT DISTINCT LOCATION FROM track </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> How many races are there? <s> SELECT count(*) FROM race </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Count the number of races. <s> SELECT count(*) FROM race </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the distinct classes that races can have? <s> SELECT DISTINCT CLASS FROM race </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Return the different classes of races. <s> SELECT DISTINCT CLASS FROM race </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show name, class, and date for all races. <s> SELECT name ,  CLASS ,  date FROM race </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the names, classes, and dates for all races? <s> SELECT name ,  CLASS ,  date FROM race </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show the race class and number of races in each class. <s> SELECT CLASS ,  count(*) FROM race GROUP BY CLASS </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the different classes of races, and how many races correspond to each? <s> SELECT CLASS ,  count(*) FROM race GROUP BY CLASS </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What is the race class with most number of races. <s> SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Give the class of races that is most common. <s> SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> List the race class with at least two races. <s> SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the classes of races that have two or more corresponding races? <s> SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the names for tracks without a race in class 'GT'. <s> SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT' </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Give the names of tracks that do not have a race in the class 'GT'. <s> SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT' </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show all track names that have had no races. <s> SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race) </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Return the names of tracks that have no had any races. <s> SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race) </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened. <s> SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the years of opening for tracks with seating between 4000 and 5000? <s> SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show the name of track and the number of races in each track. <s> SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the names of different tracks, and how many races has each had? <s> SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show the name of track with most number of races. <s> SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What is the name of the track that has had the greatest number of races? <s> SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show the name and date for each race and its track name. <s> SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the names and dates of races, and the names of the tracks where they are held? <s> SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Show the name and location of track with 1 race. <s> SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the names and locations of tracks that have had exactly 1 race? <s> SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. <s> SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000 </s>
--SEPARATOR--
race <c> Race_ID <t> number <c> Name <t> text <c> Class <t> text <c> Date <t> text <c> Track_ID <t> text </t> track <c> Track_ID <t> number <c> Name <t> text <c> Location <t> text <c> Seating <t> number <c> Year_Opened <t> number <i> What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? <s> SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000 </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> How many members have the black membership card? <s> SELECT count(*) FROM member WHERE Membership_card  =  'Black' </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Find the number of members living in each address. <s> SELECT count(*) ,  address FROM member GROUP BY address </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Give me the names of members whose address is in Harford or Waterbury. <s> SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury' </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Find the ids and names of members who are under age 30 or with black membership card. <s> SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30 </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Find the purchase time, age and address of each member, and show the results in the order of purchase time. <s> SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Which membership card has more than 5 members? <s> SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5 </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Which address has both members younger than 30 and members older than 40? <s> SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40 </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> What is the membership card held by both members living in Hartford and ones living in Waterbury address? <s> SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury' </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> How many members are not living in Hartford? <s> SELECT count(*) FROM member WHERE address != 'Hartford' </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Which address do not have any member with the black membership card? <s> SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black' </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Show the shop addresses ordered by their opening year. <s> SELECT address FROM shop ORDER BY open_year </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> What are the average score and average staff number of all shops? <s> SELECT avg(num_of_staff) ,  avg(score) FROM shop </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Find the id and address of the shops whose score is below the average score. <s> SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop) </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Find the address and staff number of the shops that do not have any happy hour. <s> SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour) </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> What are the id and address of the shops which have a happy hour in May? <s> SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May' </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> which shop has happy hour most frequently? List its id and number of happy hours. <s> SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Which month has the most happy hours? <s> SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
shop <c> Shop_ID <t> number <c> Address <t> text <c> Num_of_staff <t> text <c> Score <t> number <c> Open_Year <t> text </t> member <c> Member_ID <t> number <c> Name <t> text <c> Membership_card <t> text <c> Age <t> number <c> Time_of_purchase <t> number <c> Level_of_membership <t> number <c> Address <t> text </t> happy_hour <c> HH_ID <t> number <c> Shop_ID <t> number <c> Month <t> text <c> Num_of_shaff_in_charge <t> number </t> happy_hour_member <c> HH_ID <t> number <c> Member_ID <t> number <c> Total_amount <t> number <i> Which months have more than 2 happy hours? <s> SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> How many albums are there? <s> SELECT count(*) FROM ALBUM </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the number of albums. <s> SELECT count(*) FROM ALBUM </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> List the names of all music genres. <s> SELECT Name FROM GENRE </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the names of different music genres? <s> SELECT Name FROM GENRE </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find all the customer information in state NY. <s> SELECT * FROM CUSTOMER WHERE State  =  "NY" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is all the customer information for customers in NY state? <s> SELECT * FROM CUSTOMER WHERE State  =  "NY" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the first names and last names of the employees who live in Calgary city. <s> SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  "Calgary" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the full names of employees living in the city of Calgary. <s> SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  "Calgary" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the distinct billing countries of the invoices? <s> SELECT distinct(BillingCountry) FROM INVOICE </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the different billing countries for all invoices. <s> SELECT distinct(BillingCountry) FROM INVOICE </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the names of all artists that have "a" in their names. <s> SELECT Name FROM ARTIST WHERE Name LIKE "%a%" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the names of artist who have the letter 'a' in their names? <s> SELECT Name FROM ARTIST WHERE Name LIKE "%a%" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the title of all the albums of the artist "AC/DC". <s> SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  "AC/DC" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the titles of albums by the artist "AC/DC"? <s> SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  "AC/DC" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Hom many albums does the artist "Metallica" have? <s> SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  "Metallica" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the number of albums by the artist "Metallica". <s> SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  "Metallica" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Which artist does the album "Balls to the Wall" belong to? <s> SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  "Balls to the Wall" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the name of the artist who made the album "Balls to the Wall". <s> SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  "Balls to the Wall" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Which artist has the most albums? <s> SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the name of the artist with the greatest number of albums? <s> SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the names of all the tracks that contain the word "you". <s> SELECT Name FROM TRACK WHERE Name LIKE '%you%' </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the names of tracks that contain the the word you in them? <s> SELECT Name FROM TRACK WHERE Name LIKE '%you%' </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the average unit price of all the tracks? <s> SELECT AVG(UnitPrice) FROM TRACK </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the average unit price for a track. <s> SELECT AVG(UnitPrice) FROM TRACK </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the durations of the longest and the shortest tracks in milliseconds? <s> SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the maximum and minimum durations of tracks in milliseconds. <s> SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Show the album names, ids and the number of tracks for each album. <s> SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the names and ids of the different albums, and how many tracks are on each? <s> SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the name of the most common genre in all tracks? <s> SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the name of the genre that is most frequent across all tracks. <s> SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the least common media type in all tracks? <s> SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the name of the media type that is least common across all tracks? <s> SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Show the album names and ids for albums that contain tracks with unit price bigger than 1. <s> SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the titles and ids for albums containing tracks with unit price greater than 1? <s> SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> How many tracks belong to rock genre? <s> SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Rock" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Count the number of tracks that are part of the rock genre. <s> SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Rock" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the average unit price of tracks that belong to Jazz genre? <s> SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Jazz" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the average unit price of jazz tracks. <s> SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Jazz" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the first name and last name of the customer that has email "luisg@embraer.com.br"? <s> SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  "luisg@embraer.com.br" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the full name of the customer with the email "luisg@embraer.com.br". <s> SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  "luisg@embraer.com.br" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> How many customers have email that contains "gmail.com"? <s> SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE "%gmail.com%" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Count the number of customers that have an email containing "gmail.com". <s> SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE "%gmail.com%" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the first name and last name employee helps the customer with first name Leonie? <s> SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  "Leonie" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the full names of employees who help customers with the first name Leonie. <s> SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  "Leonie" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What city does the employee who helps the customer with postal code 70174 live in? <s> SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  "70174" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the cities corresponding to employees who help customers with the postal code 70174. <s> SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  "70174" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> How many distinct cities does the employees live in? <s> SELECT COUNT(DISTINCT city) FROM EMPLOYEE </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the number of different cities that employees live in. <s> SELECT COUNT(DISTINCT city) FROM EMPLOYEE </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find all invoice dates corresponding to customers with first name Astrid and last name Gruber. <s> SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  "Astrid" AND LastName  =  "Gruber" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the invoice dates for customers with the first name Astrid and the last name Gruber? <s> SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  "Astrid" AND LastName  =  "Gruber" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find all the customer last names that do not have invoice totals larger than 20. <s> SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the last names of customers without invoice totals exceeding 20? <s> SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the first names of all customers that live in Brazil and have an invoice. <s> SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  "Brazil" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the different first names for customers from Brazil who have also had an invoice? <s> SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  "Brazil" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the address of all customers that live in Germany and have invoice. <s> SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  "Germany" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the addresses of customers living in Germany who have had an invoice? <s> SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  "Germany" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> List the phone numbers of all employees. <s> SELECT Phone FROM EMPLOYEE </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the phone numbers for each employee? <s> SELECT Phone FROM EMPLOYEE </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> How many tracks are in the AAC audio file media type? <s> SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  "AAC audio file" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Count the number of tracks that are of the media type "AAC audio file". <s> SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  "AAC audio file" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the average duration in milliseconds of tracks that belong to Latin or Pop genre? <s> SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Latin" OR T1.Name  =  "Pop" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the average millisecond length of Latin and Pop tracks. <s> SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Latin" OR T1.Name  =  "Pop" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Please show the employee first names and ids of employees who serve at least 10 customers. <s> SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the first names and support rep ids for employees serving 10 or more customers? <s> SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Please show the employee last names that serves no more than 20 customers. <s> SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the last names of employees who serve at most 20 customers? <s> SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20 </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Please list all album titles in alphabetical order. <s> SELECT Title FROM ALBUM ORDER BY Title </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are all the album titles, in alphabetical order? <s> SELECT Title FROM ALBUM ORDER BY Title </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Please list the name and id of all artists that have at least 3 albums in alphabetical order. <s> SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the names and ids of artists with 3 or more albums, listed in alphabetical order? <s> SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the names of artists that do not have any albums. <s> SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the names of artists who have not released any albums? <s> SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What is the average unit price of rock tracks? <s> SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Rock" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the average unit price of tracks from the Rock genre. <s> SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Rock" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the duration of the longest and shortest pop tracks in milliseconds? <s> SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Pop" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the maximum and minimum millisecond lengths of pop tracks. <s> SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Pop" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the birth dates of employees living in Edmonton? <s> SELECT BirthDate FROM EMPLOYEE WHERE City  =  "Edmonton" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the birth dates corresponding to employees who live in the city of Edmonton. <s> SELECT BirthDate FROM EMPLOYEE WHERE City  =  "Edmonton" </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the distinct unit prices of all tracks? <s> SELECT distinct(UnitPrice) FROM TRACK </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the distinct unit prices for tracks. <s> SELECT distinct(UnitPrice) FROM TRACK </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> How many artists do not have any album? <s> SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM) </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Cound the number of artists who have not released an album. <s> SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM) </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks? <s> SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock' </s>
--SEPARATOR--
Album <c> AlbumId <t> number <c> Title <t> text <c> ArtistId <t> number </t> Artist <c> ArtistId <t> number <c> Name <t> text </t> Customer <c> CustomerId <t> number <c> FirstName <t> text <c> LastName <t> text <c> Company <t> text <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text <c> SupportRepId <t> number </t> Employee <c> EmployeeId <t> number <c> LastName <t> text <c> FirstName <t> text <c> Title <t> text <c> ReportsTo <t> number <c> BirthDate <t> time <c> HireDate <t> time <c> Address <t> text <c> City <t> text <c> State <t> text <c> Country <t> text <c> PostalCode <t> text <c> Phone <t> text <c> Fax <t> text <c> Email <t> text </t> Genre <c> GenreId <t> number <c> Name <t> text </t> Invoice <c> InvoiceId <t> number <c> CustomerId <t> number <c> InvoiceDate <t> time <c> BillingAddress <t> text <c> BillingCity <t> text <c> BillingState <t> text <c> BillingCountry <t> text <c> BillingPostalCode <t> text <c> Total <t> number </t> InvoiceLine <c> InvoiceLineId <t> number <c> InvoiceId <t> number <c> TrackId <t> number <c> UnitPrice <t> number <c> Quantity <t> number </t> MediaType <c> MediaTypeId <t> number <c> Name <t> text </t> Playlist <c> PlaylistId <t> number <c> Name <t> text </t> PlaylistTrack <c> PlaylistId <t> number <c> TrackId <t> number </t> Track <c> TrackId <t> number <c> Name <t> text <c> AlbumId <t> number <c> MediaTypeId <t> number <c> GenreId <t> number <c> Composer <t> text <c> Milliseconds <t> number <c> Bytes <t> number <c> UnitPrice <t> number <i> Find the titles of albums that contain tracks of both the Reggae and Rock genres. <s> SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock' </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find all the phone numbers. <s> SELECT customer_phone FROM available_policies </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are all the phone numbers? <s> SELECT customer_phone FROM available_policies </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are the customer phone numbers under the policy "Life Insurance"? <s> SELECT customer_phone FROM available_policies WHERE policy_type_code  =  "Life Insurance" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are the phone numbers of customers using the policy with the code "Life Insurance"? <s> SELECT customer_phone FROM available_policies WHERE policy_type_code  =  "Life Insurance" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Which policy type has the most records in the database? <s> SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Which policy type appears most frequently in the available policies? <s> SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are all the customer phone numbers under the most popular policy type? <s> SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1) </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the phone numbers of customers using the most common policy type among the available policies. <s> SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1) </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the policy type used by more than 4 customers. <s> SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the policy types more than 4 customers use. Show their type code. <s> SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the total and average amount of settlements. <s> SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Return the sum and average of all settlement amounts. <s> SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the name of services that have been used for more than 2 times in first notification of loss. <s> SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Which services have been used more than twice in first notification of loss? Return the service name. <s> SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What is the effective date of the claim that has the largest amount of total settlement? <s> SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the claim that has the largest total settlement amount. Return the effective date of the claim. <s> SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> How many policies are listed for the customer named "Dayana Robel"? <s> SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Dayana Robel" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Count the total number of policies used by the customer named "Dayana Robel". <s> SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Dayana Robel" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What is the name of the customer who has the most policies listed? <s> SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Which customer uses the most policies? Give me the customer name. <s> SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are all the policy types of the customer named "Dayana Robel"? <s> SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  "Dayana Robel" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Tell me the types of the policy used by the customer named "Dayana Robel". <s> SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  "Dayana Robel" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are all the policy types of the customer that has the most policies listed? <s> SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1) </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> List all the policy types used by the customer enrolled in the most policies. <s> SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1) </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> List all the services in the alphabetical order. <s> SELECT service_name FROM services ORDER BY service_name </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Give me a list of all the service names sorted alphabetically. <s> SELECT service_name FROM services ORDER BY service_name </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> How many services are there? <s> SELECT count(*) FROM services </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Count the total number of available services. <s> SELECT count(*) FROM services </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the names of users who do not have a first notification of loss record. <s> SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Which customers do not have a first notification of loss record? Give me the customer names. <s> SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the names of customers who have used either the service "Close a policy" or the service "Upgrade a policy". <s> SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "Close a policy" OR t3.service_name  =  "Upgrade a policy" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Which customers have used the service named "Close a policy" or "Upgrade a policy"? Give me the customer names. <s> SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "Close a policy" OR t3.service_name  =  "Upgrade a policy" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the names of customers who have used both the service "Close a policy" and the service "New policy application". <s> SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "Close a policy" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "New policy application" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Which customers have used both the service named "Close a policy" and the service named "Upgrade a policy"? Give me the customer names. <s> SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "Close a policy" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "New policy application" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the IDs of customers whose name contains "Diana". <s> SELECT customer_id FROM customers WHERE customer_name LIKE "%Diana%" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are the IDs of customers who have "Diana" in part of their names? <s> SELECT customer_id FROM customers WHERE customer_name LIKE "%Diana%" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are the maximum and minimum settlement amount on record? <s> SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Find the maximum and minimum settlement amount. <s> SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> List all the customers in increasing order of IDs. <s> SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What is the ordered list of customer ids? <s> SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> Retrieve the open and close dates of all the policies associated with the customer whose name contains "Diana" <s> SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE "%Diana%" </s>
--SEPARATOR--
Customers <c> Customer_ID <t> number <c> Customer_name <t> text </t> Services <c> Service_ID <t> number <c> Service_name <t> text </t> Available_Policies <c> Policy_ID <t> number <c> policy_type_code <t> text <c> Customer_Phone <t> text </t> Customers_Policies <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Date_Opened <t> time <c> Date_Closed <t> time </t> First_Notification_of_Loss <c> FNOL_ID <t> number <c> Customer_ID <t> number <c> Policy_ID <t> number <c> Service_ID <t> number </t> Claims <c> Claim_ID <t> number <c> FNOL_ID <t> number <c> Effective_Date <t> time </t> Settlements <c> Settlement_ID <t> number <c> Claim_ID <t> number <c> Effective_Date <t> time <c> Settlement_Amount <t> number <i> What are the open and close dates of all the policies used by the customer who have "Diana" in part of their names? <s> SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE "%Diana%" </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> How many kinds of enzymes are there? <s> SELECT count(*) FROM enzyme </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the total count of enzymes? <s> SELECT count(*) FROM enzyme </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> List the name of enzymes in descending lexicographical order. <s> SELECT name FROM enzyme ORDER BY name DESC </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names of enzymes in descending order? <s> SELECT name FROM enzyme ORDER BY name DESC </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> List the names and the locations that the enzymes can make an effect. <s> SELECT name ,  LOCATION FROM enzyme </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names and locations of all enzymes listed? <s> SELECT name ,  LOCATION FROM enzyme </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? <s> SELECT max(OMIM) FROM enzyme </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the maximum OMIM value in the database? <s> SELECT max(OMIM) FROM enzyme </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? <s> SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'? <s> SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names of enzymes who does not produce 'Heme'? <s> SELECT name FROM enzyme WHERE product != 'Heme' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names of enzymes whose product is not 'Heme'? <s> SELECT name FROM enzyme WHERE product != 'Heme' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names and trade names of the medicines which has 'Yes' value in the FDA record? <s> SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names and trade names of the medcines that are FDA approved? <s> SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'? <s> SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors? <s> SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the ids and names of the medicine that can interact with two or more enzymes? <s> SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2 </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> For every medicine id, what are the names of the medicines that can interact with more than one enzyme? <s> SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2 </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with. <s> SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions? <s> SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the id and name of the enzyme with most number of medicines that can interact as 'activator'? <s> SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the id and name of the enzyme that can interact with the most medicines as an activator? <s> SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'? <s> SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'? <s> SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the most common interaction type between enzymes and medicine? And how many are there? <s> SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the most common types of interactions between enzymes and medicine, and how many types are there? <s> SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1 </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> How many medicines have the FDA approval status 'No' ? <s> SELECT count(*) FROM medicine WHERE FDA_approved  =  'No' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> How many medicines were not approved by the FDA? <s> SELECT count(*) FROM medicine WHERE FDA_approved  =  'No' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> How many enzymes do not have any interactions? <s> SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ); </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the count of enzymes without any interactions? <s> SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ); </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What is the id and trade name of the medicines can interact with at least 3 enzymes? <s> SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3 </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the ids and trade names of the medicine that can interact with at least 3 enzymes? <s> SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3 </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction? <s> SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the different names, locations, and products of the enzymes that are capable inhibitor interactions? <s> SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. <s> SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes? <s> SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'. <s> SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'? <s> SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX' </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> How many distinct FDA approval statuses are there for the medicines? <s> SELECT count(DISTINCT FDA_approved) FROM medicine </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> How many different FDA approval statuses exist for medicines? <s> SELECT count(DISTINCT FDA_approved) FROM medicine </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> Which enzyme names have the substring "ALA"? <s> SELECT name FROM enzyme WHERE name LIKE "%ALA%" </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> What are the names of enzymes that include the string 'ALA'? <s> SELECT name FROM enzyme WHERE name LIKE "%ALA%" </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> find the number of medicines offered by each trade. <s> SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name </s>
--SEPARATOR--
medicine <c> id <t> number <c> name <t> text <c> Trade_Name <t> text <c> FDA_approved <t> text </t> enzyme <c> id <t> number <c> name <t> text <c> Location <t> text <c> Product <t> text <c> Chromosome <t> text <c> OMIM <t> number <c> Porphyria <t> text </t> medicine_enzyme_interaction <c> enzyme_id <t> number <c> medicine_id <t> number <c> interaction_type <t> text <i> How many medicines are offered by each trade name? <s> SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> List all schools and their nicknames in the order of founded year. <s> SELECT school ,  nickname FROM university ORDER BY founded </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What are the different schools and their nicknames, ordered by their founding years? <s> SELECT school ,  nickname FROM university ORDER BY founded </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> List all public schools and their locations. <s> SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public' </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What are the public schools and what are their locations? <s> SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public' </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> When was the school with the largest enrollment founded? <s> SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Return the founded year for the school with the largest enrollment. <s> SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Find the founded year of the newest non public school. <s> SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What is the founded year of the non public school that was founded most recently? <s> SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> How many schools are in the basketball match? <s> SELECT count(DISTINCT school_id) FROM basketball_match </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Count the number of schools that have had basketball matches. <s> SELECT count(DISTINCT school_id) FROM basketball_match </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What is the highest acc percent score in the competition? <s> SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Return the highest acc percent across all basketball matches. <s> SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What is the primary conference of the school that has the lowest acc percent score in the competition? <s> SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Return the primary conference of the school with the lowest acc percentage score. <s> SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What is the team name and acc regular season score of the school that was founded for the longest time? <s> SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Return the name of the team and the acc during the regular season for the school that was founded the earliest. <s> SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Find the location and all games score of the school that has Clemson as its team name. <s> SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson' </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What are the all games score and location of the school called Clemson? <s> SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson' </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What are the average enrollment size of the universities that are founded before 1850? <s> SELECT avg(enrollment) FROM university WHERE founded  <  1850 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Return the average enrollment of universities founded before 1850. <s> SELECT avg(enrollment) FROM university WHERE founded  <  1850 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> Show the enrollment and primary_conference of the oldest college. <s> SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What are the enrollment and primary conference for the university which was founded the earliest? <s> SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1 </s>
--SEPARATOR--
basketball_match <c> Team_ID <t> number <c> School_ID <t> number <c> Team_Name <t> text <c> ACC_Regular_Season <t> text <c> ACC_Percent <t> text <c> ACC_Home <t> text <c> ACC_Road <t> text <c> All_Games <t> text <c> All_Games_Percent <t> number <c> All_Home <t> text <c> All_Road <t> text <c> All_Neutral <t> text </t> university <c> School_ID <t> number <c> School <t> text <c> Location <t> text <c> Founded <t> number <c> Affiliation <t> text <c> Enrollment <t> number <c> Nickname <t> text <c> Primary_conference <t> text <i> What is the total and minimum enrollment of all schools? <s> SELECT sum(enrollment) ,  min(enrollment) FROM university </s>